MongoDB string de conex√£o: mongodb+srv://francahigor96:Ncj7GvL2rZhrWsuF@cluster0.jjmfkot.mongodb.net/

Passo a passo instala√ß√£o e cria√ß√£o de API simples:


## üß∞ 1. Pr√©-requisitos (instala√ß√µes iniciais)

### a) Instale o **Node.js**:

* Acesse: [https://nodejs.org/](https://nodejs.org/)
* Baixe a vers√£o LTS (recomendada)
* Ap√≥s instalar, abra o terminal e digite:

  ```bash
  node -v
  npm -v
  ```

  Isso deve mostrar as vers√µes instaladas.

### b) Instale o **MongoDB**:

Voc√™ pode usar o MongoDB local ou em nuvem. Para facilitar, vamos usar o **MongoDB Atlas (nuvem)**:

1. V√° em: [https://www.mongodb.com/cloud/atlas](https://www.mongodb.com/cloud/atlas)
2. Crie uma conta gratuita.
3. Crie um cluster gratuito (M0).
4. Crie um usu√°rio com senha e copie a **connection string** (vai precisar depois).

---

## üìÅ 2. Crie seu projeto no VS Code

1. Crie uma nova pasta e abra no VS Code.
2. Abra o terminal e rode:

   ```bash
   npm init -y
   ```

---

## üì¶ 3. Instale os pacotes necess√°rios

```bash
npm install express mongoose dotenv
```

* `express`: framework web para Node
* `mongoose`: ODM para MongoDB
* `dotenv`: para usar vari√°veis de ambiente

---

## üìÑ 4. Estrutura de pastas (b√°sica)

```
meu-projeto/
‚îÇ
‚îú‚îÄ‚îÄ .env
‚îú‚îÄ‚îÄ index.js
‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îî‚îÄ‚îÄ Usuario.js
‚îî‚îÄ‚îÄ routes/
    ‚îî‚îÄ‚îÄ usuarios.js
```

---

## üß† 5. Crie o servidor com Express (`index.js`)

```js
require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');

const app = express();
app.use(express.json());

// Conex√£o com MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => {
  console.log('MongoDB conectado');
}).catch(err => console.error(err));

// Rotas
const usuariosRoutes = require('./routes/usuarios');
app.use('/usuarios', usuariosRoutes);

// Inicia servidor
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Servidor rodando na porta ${PORT}`);
});
```

---

## üå± 6. Vari√°veis de ambiente (`.env`)

```env
MONGO_URI=mongodb+srv://usuario:senha@cluster.mongodb.net/meubanco?retryWrites=true&w=majority
PORT=3000
```

> Lembre de trocar `usuario`, `senha` e `meubanco` com os dados do MongoDB Atlas.

---

## üë§ 7. Modelo Mongoose (`models/Usuario.js`)

```js
const mongoose = require('mongoose');

const UsuarioSchema = new mongoose.Schema({
  nome: String,
  email: String,
  senha: String,
}, { timestamps: true });

module.exports = mongoose.model('Usuario', UsuarioSchema);
```

---

## üîÅ 8. Rotas da API (`routes/usuarios.js`)

```js
const express = require('express');
const router = express.Router();
const Usuario = require('../models/Usuario');

// Criar usu√°rio
router.post('/', async (req, res) => {
  const { nome, email, senha } = req.body;
  try {
    const novoUsuario = await Usuario.create({ nome, email, senha });
    res.status(201).json(novoUsuario);
  } catch (err) {
    res.status(500).json({ erro: err.message });
  }
});

// Listar todos os usu√°rios
router.get('/', async (req, res) => {
  try {
    const usuarios = await Usuario.find();
    res.json(usuarios);
  } catch (err) {
    res.status(500).json({ erro: err.message });
  }
});

module.exports = router;
```

---

## ‚ñ∂Ô∏è 9. Rodando o projeto

No terminal, execute:

```bash
node index.js ou npx nodemon index.js (REINICIA O SERVIDOR AUTOMATICAMENTE AP√ìS MUDAN√áAS)
```

Voc√™ ver√° algo como:

```
MongoDB conectado
Servidor rodando na porta 3000
```

---

## üß™ 10. Testando a API

Use o [Insomnia](https://insomnia.rest/) ou [Postman](https://www.postman.com/) para testar as rotas:

* `POST http://localhost:3000/usuarios`

  ```json
  {
    "nome": "Higor",
    "email": "higor@email.com",
    "senha": "123456"
  }
  ```

* `GET http://localhost:3000/usuarios`

---

## Instalando o pacote jsonwebtoken (para gerar e validar token) e bcrypt (para encriptar e validar senha):

npm install jsonwebtoken bcrypt

## Instalando a biblioteca joi (validar os dados recebidos nas rotas antes de criar/atualizar registros no banco)

npm install joi
