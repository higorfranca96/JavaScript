MongoDB string de conexão: mongodb+srv://francahigor96:Ncj7GvL2rZhrWsuF@cluster0.jjmfkot.mongodb.net/

Passo a passo instalação e criação de API simples:


## 🧰 1. Pré-requisitos (instalações iniciais)

### a) Instale o **Node.js**:

* Acesse: [https://nodejs.org/](https://nodejs.org/)
* Baixe a versão LTS (recomendada)
* Após instalar, abra o terminal e digite:

  ```bash
  node -v
  npm -v
  ```

  Isso deve mostrar as versões instaladas.

### b) Instale o **MongoDB**:

Você pode usar o MongoDB local ou em nuvem. Para facilitar, vamos usar o **MongoDB Atlas (nuvem)**:

1. Vá em: [https://www.mongodb.com/cloud/atlas](https://www.mongodb.com/cloud/atlas)
2. Crie uma conta gratuita.
3. Crie um cluster gratuito (M0).
4. Crie um usuário com senha e copie a **connection string** (vai precisar depois).

---

## 📁 2. Crie seu projeto no VS Code

1. Crie uma nova pasta e abra no VS Code.
2. Abra o terminal e rode:

   ```bash
   npm init -y
   ```

---

## 📦 3. Instale os pacotes necessários

```bash
npm install express mongoose dotenv
```

* `express`: framework web para Node
* `mongoose`: ODM para MongoDB
* `dotenv`: para usar variáveis de ambiente

---

## 📄 4. Estrutura de pastas (básica)

```
meu-projeto/
│
├── .env
├── index.js
├── models/
│   └── Usuario.js
└── routes/
    └── usuarios.js
```

---

## 🧠 5. Crie o servidor com Express (`index.js`)

```js
require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');

const app = express();
app.use(express.json());

// Conexão com MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => {
  console.log('MongoDB conectado');
}).catch(err => console.error(err));

// Rotas
const usuariosRoutes = require('./routes/usuarios');
app.use('/usuarios', usuariosRoutes);

// Inicia servidor
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Servidor rodando na porta ${PORT}`);
});
```

---

## 🌱 6. Variáveis de ambiente (`.env`)

```env
MONGO_URI=mongodb+srv://usuario:senha@cluster.mongodb.net/meubanco?retryWrites=true&w=majority
PORT=3000
```

> Lembre de trocar `usuario`, `senha` e `meubanco` com os dados do MongoDB Atlas.

---

## 👤 7. Modelo Mongoose (`models/Usuario.js`)

```js
const mongoose = require('mongoose');

const UsuarioSchema = new mongoose.Schema({
  nome: String,
  email: String,
  senha: String,
}, { timestamps: true });

module.exports = mongoose.model('Usuario', UsuarioSchema);
```

---

## 🔁 8. Rotas da API (`routes/usuarios.js`)

```js
const express = require('express');
const router = express.Router();
const Usuario = require('../models/Usuario');

// Criar usuário
router.post('/', async (req, res) => {
  const { nome, email, senha } = req.body;
  try {
    const novoUsuario = await Usuario.create({ nome, email, senha });
    res.status(201).json(novoUsuario);
  } catch (err) {
    res.status(500).json({ erro: err.message });
  }
});

// Listar todos os usuários
router.get('/', async (req, res) => {
  try {
    const usuarios = await Usuario.find();
    res.json(usuarios);
  } catch (err) {
    res.status(500).json({ erro: err.message });
  }
});

module.exports = router;
```

---

## ▶️ 9. Rodando o projeto

No terminal, execute:

```bash
node index.js ou npx nodemon index.js (REINICIA O SERVIDOR AUTOMATICAMENTE APÓS MUDANÇAS)
```

Você verá algo como:

```
MongoDB conectado
Servidor rodando na porta 3000
```

---

## 🧪 10. Testando a API

Use o [Insomnia](https://insomnia.rest/) ou [Postman](https://www.postman.com/) para testar as rotas:

* `POST http://localhost:3000/usuarios`

  ```json
  {
    "nome": "Higor",
    "email": "higor@email.com",
    "senha": "123456"
  }
  ```

* `GET http://localhost:3000/usuarios`

---

## Instalando o pacote jsonwebtoken (para gerar e validar token) e bcrypt (para encriptar e validar senha):

npm install jsonwebtoken bcrypt

## Instalando a biblioteca joi (validar os dados recebidos nas rotas antes de criar/atualizar registros no banco)

npm install joi


Testes automatizados são essenciais para garantir que a API **funcione como esperado**, especialmente conforme você adiciona novas funcionalidades.

---

## 🧪 O que vamos usar

Para sua API com Node.js, Express e MongoDB, o combo mais usado é:

| Lib                       | Função                                       |
| ------------------------- | -------------------------------------------- |
| **Jest**                  | Framework de testes (assertivas, execução)   |
| **Supertest**             | Faz chamadas HTTP simuladas à API            |
| **mongodb-memory-server** | Cria um banco MongoDB temporário para testes |

---

## 📦 Instalação das dependências

```bash
npm install --save-dev jest supertest mongodb-memory-server dotenv
```

Em seguida, adicione ao `package.json`:

```json
"scripts": {
  "test": "jest"
}
```

---

## 🧱 Estrutura de testes sugerida

```
tests/
├── setup.js
├── usuarios.test.js
└── tarefas.test.js
```

---

## ⚙️ `tests/setup.js` (configuração e teardown do Mongo)

```js
const mongoose = require('mongoose');
const { MongoMemoryServer } = require('mongodb-memory-server');

let mongo;

beforeAll(async () => {
  mongo = await MongoMemoryServer.create();
  const uri = mongo.getUri();
  await mongoose.connect(uri);
});

afterAll(async () => {
  await mongoose.connection.dropDatabase();
  await mongoose.connection.close();
  await mongo.stop();
});

afterEach(async () => {
  const collections = mongoose.connection.collections;
  for (let key in collections) {
    await collections[key].deleteMany();
  }
});
```

No `package.json`, configure o Jest para usar esse arquivo:

```json
"jest": {
  "setupFilesAfterEnv": ["<rootDir>/tests/setup.js"]
}
```

---

## 🧪 `tests/usuarios.test.js`

```js
const request = require('supertest');
const app = require('../src/index'); // exporta app do index.js

describe('Cadastro e login de usuário', () => {
  it('deve cadastrar um novo usuário', async () => {
    const res = await request(app)
      .post('/usuarios/cadastrar')
      .send({ nome: 'João', email: 'joao@email.com', senha: '123456' });

    expect(res.statusCode).toBe(201);
  });

  it('deve logar com sucesso e retornar token', async () => {
    await request(app)
      .post('/usuarios/cadastrar')
      .send({ nome: 'Maria', email: 'maria@email.com', senha: '123456' });

    const res = await request(app)
      .post('/usuarios/login')
      .send({ email: 'maria@email.com', senha: '123456' });

    expect(res.statusCode).toBe(200);
    expect(res.body.token).toBeDefined();
  });
});
```

---

## 📄 Para isso funcionar, altere `src/index.js` para exportar o `app`

```js
const express = require('express');
const mongoose = require('mongoose');
require('dotenv').config();

const app = express();
app.use(express.json());

app.use('/usuarios', require('./routes/usuarios'));
app.use('/tarefas', require('./routes/tarefas'));

// só conecta se não estiver em modo de teste
if (process.env.NODE_ENV !== 'test') {
  mongoose.connect(process.env.MONGO_URL)
    .then(() => console.log('MongoDB conectado'))
    .catch(err => console.error(err));

  app.listen(3000, () => console.log('Servidor rodando na porta 3000'));
}

module.exports = app;
```

---

## 📌 Teste para tarefas (`tests/tarefas.test.js`)

Você pode seguir a mesma ideia:

* Criar um usuário
* Logar e pegar o token
* Criar tarefas com o token
* Testar se o GET retorna apenas as tarefas daquele usuário

Se quiser, posso montar esse teste completo pra tarefas também.

---

## ✅ Comandos

```bash
npm test
```

---

Quer que eu monte agora o `tarefas.test.js` com teste completo de autenticação + CRUD?

